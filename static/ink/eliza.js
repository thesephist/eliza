Newline = char(10);
Punctuations = [__Ink_String(`.`), __Ink_String(`,`), __Ink_String(`?`), __Ink_String(`;`)];
contains = (list, item) => some(map(list, it => __ink_eq(it, item)));
choose = list => (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return floor((len(list) * rand()))})()] || null : (__ink_acc_trgt[(() => {return floor((len(list) * rand()))})()] !== undefined ? __ink_acc_trgt[(() => {return floor((len(list) * rand()))})()] : null)})();
parseScriptFile = scriptFile => (() => {let maybeEmptyLines = split(scriptFile, Newline); let trimmedLines = map(maybeEmptyLines, line => trim(line, __Ink_String(` `))); let lines = filter(trimmedLines, line => (len(line) > 0)); let S = {key: null, decomp: null, initials: [], finals: [], quits: [], pres: {}, posts: {}, synons: {}, keys: {}, memory: []}; each(lines, line => (() => {let parts = map(split(line, __Ink_String(`:`)), part => trim(part, __Ink_String(` `))); let tag = (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(); let content = (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})(); return __ink_match(tag, [[() => __Ink_String(`initial`), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initials] || null : (__ink_acc_trgt.initials !== undefined ? __ink_acc_trgt.initials : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initials] || null : (__ink_acc_trgt.initials !== undefined ? __ink_acc_trgt.initials : null)})()), content) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initials] || null : (__ink_acc_trgt.initials !== undefined ? __ink_acc_trgt.initials : null)})())]) = content; return __ink_assgn_trgt})()], [() => __Ink_String(`final`), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[finals] || null : (__ink_acc_trgt.finals !== undefined ? __ink_acc_trgt.finals : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[finals] || null : (__ink_acc_trgt.finals !== undefined ? __ink_acc_trgt.finals : null)})()), content) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[finals] || null : (__ink_acc_trgt.finals !== undefined ? __ink_acc_trgt.finals : null)})())]) = content; return __ink_assgn_trgt})()], [() => __Ink_String(`quit`), () => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[quits] || null : (__ink_acc_trgt.quits !== undefined ? __ink_acc_trgt.quits : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[quits] || null : (__ink_acc_trgt.quits !== undefined ? __ink_acc_trgt.quits : null)})()), content) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[quits] || null : (__ink_acc_trgt.quits !== undefined ? __ink_acc_trgt.quits : null)})())]) = content; return __ink_assgn_trgt})()], [() => __Ink_String(`pre`), () => (() => {let parts = split(content, __Ink_String(` `)); return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[pres] || null : (__ink_acc_trgt.pres !== undefined ? __ink_acc_trgt.pres : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})(), slice(parts, 1, len(parts))) : (__ink_assgn_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})()]) = slice(parts, 1, len(parts)); return __ink_assgn_trgt})()})()], [() => __Ink_String(`post`), () => (() => {let parts = split(content, __Ink_String(` `)); return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[posts] || null : (__ink_acc_trgt.posts !== undefined ? __ink_acc_trgt.posts : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})(), slice(parts, 1, len(parts))) : (__ink_assgn_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})()]) = slice(parts, 1, len(parts)); return __ink_assgn_trgt})()})()], [() => __Ink_String(`synon`), () => (() => {let parts = split(content, __Ink_String(` `)); return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[synons] || null : (__ink_acc_trgt.synons !== undefined ? __ink_acc_trgt.synons : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})(), parts) : (__ink_assgn_trgt[(() => {return (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()})()]) = parts; return __ink_assgn_trgt})()})()], [() => __Ink_String(`key`), () => (() => {let parts = split(content, __Ink_String(` `)); let word = (() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(); let weight = (() => {return __ink_match((len(parts) > 1), [[() => true, () => number((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})())], [() => __Ink_Empty, () => 1]])})(); let key = {word: word, weight: weight, decomps: []}; (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return word})(), key) : (__ink_assgn_trgt[(() => {return word})()]) = key; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, key) : (__ink_assgn_trgt.key) = key; return __ink_assgn_trgt})()})()], [() => __Ink_String(`decomp`), () => (() => {let parts = split(content, __Ink_String(` `)); let save = (() => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => __Ink_String(`$`), () => true], [() => __Ink_Empty, () => false]])})(); parts = (() => {return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => __Ink_String(`$`), () => slice(parts, 1, len(parts))], [() => __Ink_Empty, () => parts]])})(); let decomp = {parts: parts, save: save, reasmbs: [], nextReasmbIdx: 0}; (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})()), decomp) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})())]) = decomp; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decomp, decomp) : (__ink_assgn_trgt.decomp) = decomp; return __ink_assgn_trgt})()})()], [() => __Ink_String(`reasmb`), () => (() => {let parts = split(content, __Ink_String(` `)); return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomp] || null : (__ink_acc_trgt.decomp !== undefined ? __ink_acc_trgt.decomp : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomp] || null : (__ink_acc_trgt.decomp !== undefined ? __ink_acc_trgt.decomp : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()), parts) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomp] || null : (__ink_acc_trgt.decomp !== undefined ? __ink_acc_trgt.decomp : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})())]) = parts; return __ink_assgn_trgt})()})()], [() => __Ink_Empty, () => log(f(__Ink_String(`Unknown script file command: {{0}}`), line))]])})()); return S})();
__ink_ident_new = scriptFile => (() => {let Script = parseScriptFile(scriptFile); let initial = () => choose((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initials] || null : (__ink_acc_trgt.initials !== undefined ? __ink_acc_trgt.initials : null)})()); let final = () => choose((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[finals] || null : (__ink_acc_trgt.finals !== undefined ? __ink_acc_trgt.finals : null)})()); let substitute = (words, pres) => reduce(words, (out, word) => (() => {word = lower(word); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(pres); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return word})()] || null : (__ink_acc_trgt[(() => {return word})()] !== undefined ? __ink_acc_trgt[(() => {return word})()] : null)})(), [[() => null, () => append(out, [word])], [() => __Ink_Empty, () => append(out, (() => {let __ink_acc_trgt = __as_ink_string(pres); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return word})()] || null : (__ink_acc_trgt[(() => {return word})()] !== undefined ? __ink_acc_trgt[(() => {return word})()] : null)})())]])})(), []); let matchKey = (words, key) => (() => {let sub = (decomps, i) => (() => {let __ink_trampolined_sub = (decomps, i) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(decomps); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null)})(), [[() => null, () => null], [() => __Ink_Empty, () => (() => {let decomp = (() => {let __ink_acc_trgt = __as_ink_string(decomps); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null)})(); let results = matchDecomp((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[parts] || null : (__ink_acc_trgt.parts !== undefined ? __ink_acc_trgt.parts : null)})(), words); return __ink_match(results, [[() => null, () => __ink_trampoline(__ink_trampolined_sub, decomps, __as_ink_string(i + 1))], [() => __Ink_Empty, () => (() => {let subResults = map(results, word => substitute(word, (() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[posts] || null : (__ink_acc_trgt.posts !== undefined ? __ink_acc_trgt.posts : null)})())); let reasmb = nextReasmb(decomp); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(reasmb); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => __Ink_String(`goto`), () => (() => {let gotoKey = (() => {let __ink_acc_trgt = __as_ink_string(reasmb); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[1] || null : (__ink_acc_trgt[1] !== undefined ? __ink_acc_trgt[1] : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return gotoKey})()] || null : (__ink_acc_trgt[(() => {return gotoKey})()] !== undefined ? __ink_acc_trgt[(() => {return gotoKey})()] : null)})(), [[() => null, () => (() => {log(__Ink_String(`Invalid goto key in script file: {{0}}`), gotoKey); return null})()], [() => __Ink_Empty, () => matchKey(words, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return gotoKey})()] || null : (__ink_acc_trgt[(() => {return gotoKey})()] !== undefined ? __ink_acc_trgt[(() => {return gotoKey})()] : null)})())]])})()], [() => __Ink_Empty, () => (() => {let output = reassemble(reasmb, subResults); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[save] || null : (__ink_acc_trgt.save !== undefined ? __ink_acc_trgt.save : null)})(), [[() => true, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})()), output) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})())]) = output; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, decomps, __as_ink_string(i + 1))})()], [() => __Ink_Empty, () => output]])})()]])})()]])})()]]); return __ink_resolve_trampoline(__ink_trampolined_sub, decomps, i)})(); return sub})()((() => {let __ink_acc_trgt = __as_ink_string(key); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})(), 0); let matchDecomp = (parts, words) => __ink_match(matchDecompR(parts, words, results = [[]]), [[() => true, () => (() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()], [() => __Ink_Empty, () => null]]); let matchDecompR = (parts, words, results) => (() => {let __ink_trampolined_matchDecompR = (parts, words, results) => __ink_match(true, [[() => (() => {return __ink_and(__ink_eq(parts, []), __ink_eq(words, []))})(), () => true], [() => (() => {return __ink_or(__ink_eq(parts, []), (() => {return __ink_and(__ink_eq(words, []), __ink_negate((() => {return __ink_eq(parts, [__Ink_String(`*`)])})()))})())})(), () => false], [() => (() => {return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), __Ink_String(`*`))})(), () => (() => {let sub = i => (() => {let __ink_trampolined_sub = i => (() => {(() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__Ink_String(`0`)] || null : (__ink_acc_trgt[__Ink_String(`0`)] !== undefined ? __ink_acc_trgt[__Ink_String(`0`)] : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()), slice(words, 0, i)) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())]) = slice(words, 0, i); return __ink_assgn_trgt})(); return __ink_match(matchDecompR(slice(parts, 1, len(parts)), slice(words, i, len(words)), results), [[() => true, () => true], [() => __Ink_Empty, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(results); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, slice((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()) - 1))) : (__ink_assgn_trgt[0]) = slice((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()) - 1)); return __ink_assgn_trgt})(); return __ink_match(i, [[() => __ink_negate(1), () => false], [() => __Ink_Empty, () => __ink_trampoline(__ink_trampolined_sub, (i - 1))]])})()]])})(); return __ink_resolve_trampoline(__ink_trampolined_sub, i)})(); return sub})()(len(words))], [() => (() => {return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__Ink_String(`0`)] || null : (__ink_acc_trgt[__Ink_String(`0`)] !== undefined ? __ink_acc_trgt[__Ink_String(`0`)] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), __Ink_String(`@`))})(), () => (() => {let root = slice((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), 1, len((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())); return __ink_match(true, [[() => (() => {return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[synons] || null : (__ink_acc_trgt.synons !== undefined ? __ink_acc_trgt.synons : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return root})()] || null : (__ink_acc_trgt[(() => {return root})()] !== undefined ? __ink_acc_trgt[(() => {return root})()] : null)})(), null)})(), () => log(f(__Ink_String(`Unknown synonym root {{0}}`), [root]))], [() => __ink_negate(contains((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[synons] || null : (__ink_acc_trgt.synons !== undefined ? __ink_acc_trgt.synons : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return root})()] || null : (__ink_acc_trgt[(() => {return root})()] !== undefined ? __ink_acc_trgt[(() => {return root})()] : null)})(), lower((() => {let __ink_acc_trgt = __as_ink_string(words); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()))), () => false], [() => __Ink_Empty, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__Ink_String(`0`)] || null : (__ink_acc_trgt[__Ink_String(`0`)] !== undefined ? __ink_acc_trgt[__Ink_String(`0`)] : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()), [(() => {let __ink_acc_trgt = __as_ink_string(words); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()]) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())]) = [(() => {let __ink_acc_trgt = __as_ink_string(words); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()]; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_matchDecompR, slice(parts, 1, len(parts)), slice(words, 1, len(words)), results)})()]])})()], [() => __ink_negate((() => {return __ink_eq(lower((() => {let __ink_acc_trgt = __as_ink_string(parts); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()), lower((() => {let __ink_acc_trgt = __as_ink_string(words); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()))})()), () => false], [() => __Ink_Empty, () => __ink_trampoline(__ink_trampolined_matchDecompR, slice(parts, 1, len(parts)), slice(words, 1, len(words)), results)]]); return __ink_resolve_trampoline(__ink_trampolined_matchDecompR, parts, words, results)})(); let nextReasmb = decomp => (() => {let index = (() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[nextReasmbIdx] || null : (__ink_acc_trgt.nextReasmbIdx !== undefined ? __ink_acc_trgt.nextReasmbIdx : null)})(); let result = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (index % len((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()))})()] || null : (__ink_acc_trgt[(() => {return (index % len((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()))})()] !== undefined ? __ink_acc_trgt[(() => {return (index % len((() => {let __ink_acc_trgt = __as_ink_string(decomp); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reasmbs] || null : (__ink_acc_trgt.reasmbs !== undefined ? __ink_acc_trgt.reasmbs : null)})()))})()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(decomp); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(nextReasmbIdx, __as_ink_string(index + 1)) : (__ink_assgn_trgt.nextReasmbIdx) = __as_ink_string(index + 1); return __ink_assgn_trgt})(); return result})(); let reassemble = (reasmb, results) => (() => {let output = []; (() => {let sub = (reasmb, i) => (() => {let __ink_trampolined_sub = (reasmb, i) => (() => {let reword = (() => {let __ink_acc_trgt = __as_ink_string(reasmb); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null)})(); return __ink_match(true, [[() => (() => {return __ink_or(__ink_eq(reword, null), __ink_eq(reword, __Ink_String(``)))})(), () => __ink_match((i < len(reasmb)), [[() => true, () => __ink_trampoline(__ink_trampolined_sub, reasmb, __as_ink_string(i + 1))], [() => __Ink_Empty, () => null]])], [() => (() => {return __ink_and(__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(reword); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), __Ink_String(`(`)), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(reword); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (len(reword) - 1)})()] || null : (__ink_acc_trgt[(() => {return (len(reword) - 1)})()] !== undefined ? __ink_acc_trgt[(() => {return (len(reword) - 1)})()] : null)})(), __Ink_String(`)`)))})(), () => (() => {let maybeNum = slice(reword, 1, (len(reword) - 1)); return __ink_match(every(map(maybeNum, digit__ink_qm__)), [[() => false, () => log(__Ink_String(`Invalid result index {{0}}`), [maybeNum])], [() => __Ink_Empty, () => (() => {let num = number(maybeNum); let insert = reduce(Punctuations, (ins, punct) => (() => {let punctIdx = index(ins, punct); return __ink_match(punctIdx, [[() => __ink_negate(1), () => ins], [() => __Ink_Empty, () => slice(ins, 0, punctIdx)]])})(), (() => {let __ink_acc_trgt = __as_ink_string(results); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return (num - 1)})()] || null : (__ink_acc_trgt[(() => {return (num - 1)})()] !== undefined ? __ink_acc_trgt[(() => {return (num - 1)})()] : null)})()); append(output, insert); return __ink_trampoline(__ink_trampolined_sub, reasmb, __as_ink_string(i + 1))})()]])})()], [() => __Ink_Empty, () => (() => {append(output, [reword]); return __ink_trampoline(__ink_trampolined_sub, reasmb, __as_ink_string(i + 1))})()]])})(); return __ink_resolve_trampoline(__ink_trampolined_sub, reasmb, i)})(); return sub})()(reasmb, 0); return output})(); let respond = request => __ink_match(contains((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[quits] || null : (__ink_acc_trgt.quits !== undefined ? __ink_acc_trgt.quits : null)})(), lower(request)), [[() => true, () => __Ink_String(``)], [() => __Ink_Empty, () => (() => {let fixedReq = reduce(Punctuations, (req, punct) => (() => {return replace(req, punct, __as_ink_string(__as_ink_string(__Ink_String(` `) + punct) + __Ink_String(` `)))})(), request); fixedReq = cat(filter(split(fixedReq, __Ink_String(` `)), s => (len(s) > 0)), __Ink_String(` `)); let words = split(fixedReq, __Ink_String(` `)); words = substitute(words, (() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[pres] || null : (__ink_acc_trgt.pres !== undefined ? __ink_acc_trgt.pres : null)})()); let keys = filter(map(words, word => (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return lower(word)})()] || null : (__ink_acc_trgt[(() => {return lower(word)})()] !== undefined ? __ink_acc_trgt[(() => {return lower(word)})()] : null)})()), w => __ink_negate((() => {return __ink_eq(w, null)})())); keys = sortBy(keys, key => __ink_negate((() => {return (() => {let __ink_acc_trgt = __as_ink_string(key); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[weight] || null : (__ink_acc_trgt.weight !== undefined ? __ink_acc_trgt.weight : null)})()})())); let Output = [null]; (() => {let sub = i => (() => {let __ink_trampolined_sub = i => __ink_match(i, [[() => len(keys), () => null], [() => __Ink_Empty, () => __ink_match((() => {let __ink_assgn_trgt = __as_ink_string(Output); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, matchKey(words, (() => {let __ink_acc_trgt = __as_ink_string(keys); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null)})())) : (__ink_assgn_trgt[0]) = matchKey(words, (() => {let __ink_acc_trgt = __as_ink_string(keys); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {return i})()] || null : (__ink_acc_trgt[(() => {return i})()] !== undefined ? __ink_acc_trgt[(() => {return i})()] : null)})()); return __ink_assgn_trgt})(), [[() => null, () => null], [() => __Ink_Empty, () => __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1))]])]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i)})(); return sub})()(0); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => null, () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})(), [[() => [], () => (() => {let __ink_assgn_trgt = __as_ink_string(Output); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, nextReasmb((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[xnone] || null : (__ink_acc_trgt.xnone !== undefined ? __ink_acc_trgt.xnone : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())) : (__ink_assgn_trgt[0]) = nextReasmb((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[keys] || null : (__ink_acc_trgt.keys !== undefined ? __ink_acc_trgt.keys : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[xnone] || null : (__ink_acc_trgt.xnone !== undefined ? __ink_acc_trgt.xnone : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decomps] || null : (__ink_acc_trgt.decomps !== undefined ? __ink_acc_trgt.decomps : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()); return __ink_assgn_trgt})()], [() => __Ink_Empty, () => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(Output); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, choose((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})())) : (__ink_assgn_trgt[0]) = choose((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})()); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(Script); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(memory, filter((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})(), x => __ink_negate((() => {return __ink_eq(x, (() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())})()))) : (__ink_assgn_trgt.memory) = filter((() => {let __ink_acc_trgt = __as_ink_string(Script); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[memory] || null : (__ink_acc_trgt.memory !== undefined ? __ink_acc_trgt.memory : null)})(), x => __ink_negate((() => {return __ink_eq(x, (() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())})())); return __ink_assgn_trgt})()})()]])], [() => __Ink_Empty, () => (() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()]]); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => null, () => (() => {let __ink_assgn_trgt = __as_ink_string(Output); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, [__Ink_String(`<no response>`)]) : (__ink_assgn_trgt[0]) = [__Ink_String(`<no response>`)]; return __ink_assgn_trgt})()]]); let response = cat((() => {let __ink_acc_trgt = __as_ink_string(Output); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), __Ink_String(` `)); response = reduce(Punctuations, (res, punct) => (() => {return replace(res, __as_ink_string(__Ink_String(` `) + punct), punct)})(), response); return response})()]]); return {initial: initial, final: final, respond: respond, testing: {substitute: substitute, matchKey: matchKey, matchDecomp: matchDecomp, matchDecompR: matchDecompR, nextReasmb: nextReasmb, reassemble: reassemble}}})();
runWithScript = (scriptFile, prompter, responder) => (() => {let Eliza = __ink_ident_new(scriptFile); let initial = (() => {let __ink_acc_trgt = __as_ink_string(Eliza); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initial] || null : (__ink_acc_trgt.initial !== undefined ? __ink_acc_trgt.initial : null)})(); let final = (() => {let __ink_acc_trgt = __as_ink_string(Eliza); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[final] || null : (__ink_acc_trgt.final !== undefined ? __ink_acc_trgt.final : null)})(); let respond = (() => {let __ink_acc_trgt = __as_ink_string(Eliza); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[respond] || null : (__ink_acc_trgt.respond !== undefined ? __ink_acc_trgt.respond : null)})(); return (() => {let sub = response => (() => {let __ink_trampolined_sub = response => (() => {responder(response); return prompter(request => __ink_match(trim(request, __Ink_String(` `)), [[() => __Ink_String(``), () => responder(final())], [() => __Ink_Empty, () => __ink_match(resp = respond(request), [[() => __Ink_String(``), () => responder(final())], [() => __Ink_Empty, () => __ink_trampoline(__ink_trampolined_sub, resp)]])]]))})(); return __ink_resolve_trampoline(__ink_trampolined_sub, response)})(); return sub})()(initial())})()
