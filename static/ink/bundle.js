
str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {  return __Ink_String(`class`) })(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => {  return __Ink_String(`class`) })()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (str(child))], [() => (__Ink_Empty), () => (child)]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => { let self; let render; let InitialDom; let node;  render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); InitialDom = h(__Ink_String(`div`), [], []); node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); return self = {node: node, prev: InitialDom, update: jdom => (() => {  (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})() })()} })()

f = format;
Speaker = {Eliza: 0, User: 1};
AccentColors = [__Ink_String(`#f6b4c0`), __Ink_String(`#67e9ca`), __Ink_String(`#71db74`), __Ink_String(`#ecb667`)];
querySelector = bind(document, __Ink_String(`querySelector`));
scrollToMessageListEnd = () => (() => { let messageList; let scrollTo;  messageList = querySelector(__Ink_String(`.eliza-message-list`)); scrollTo = bind(messageList, __Ink_String(`scrollTo`)); return scrollTo({top: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(messageList); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollTop] || null : (__ink_acc_trgt.scrollTop !== undefined ? __ink_acc_trgt.scrollTop : null)})() + 999999), behavior: __Ink_String(`smooth`)}) })();
Messages = state => (() => { let messages;  messages = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})(); return map(messages, (msg, i) => (() => { let next;  return h(__Ink_String(`div`), [__Ink_String(`eliza-message`), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(msg); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[speaker] || null : (__ink_acc_trgt.speaker !== undefined ? __ink_acc_trgt.speaker : null)})(), [[() => ((() => {  return (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})() })()), () => (__Ink_String(`from-eliza`))], [() => (__Ink_Empty), () => (__Ink_String(`from-user`))]]), __ink_match(next = (() => {let __ink_acc_trgt = __as_ink_string(messages); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => {  return __as_ink_string(i + 1) })()] || null : (__ink_acc_trgt[(() => {  return __as_ink_string(i + 1) })()] !== undefined ? __ink_acc_trgt[(() => {  return __as_ink_string(i + 1) })()] : null)})(), [[() => (null), () => (__Ink_String(`last-of-speaker`))], [() => (__Ink_Empty), () => (__ink_match(__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(next); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[speaker] || null : (__ink_acc_trgt.speaker !== undefined ? __ink_acc_trgt.speaker : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(msg); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[speaker] || null : (__ink_acc_trgt.speaker !== undefined ? __ink_acc_trgt.speaker : null)})()), [[() => (true), () => (__Ink_String(``))], [() => (__Ink_Empty), () => (__Ink_String(`last-of-speaker`))]]))]])], [str((() => {let __ink_acc_trgt = __as_ink_string(msg); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[message] || null : (__ink_acc_trgt.message !== undefined ? __ink_acc_trgt.message : null)})())]) })()) })();
App = state => (() => { let render; let r; let update; let addMessage; let minLoadingTime; let req; let goalLoadTime; let reqDecoded; let renderEliza; let self;  r = Renderer((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})(); addMessage = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[addMessage] || null : (__ink_acc_trgt.addMessage !== undefined ? __ink_acc_trgt.addMessage : null)})(); minLoadingTime = 2.50000000; goalLoadTime = __as_ink_string(time() + minLoadingTime); req = fetch(__Ink_String(`/data/script.txt`)); reqDecoded = bind(req, __Ink_String(`then`))(resp => bind(resp, __Ink_String(`text`))()); bind(reqDecoded, __Ink_String(`then`))(scriptFile => (() => { let waitRemaining;  (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(Eliza, __ink_ident_new(scriptFile)) : (__ink_assgn_trgt.Eliza) = __ink_ident_new(scriptFile); return __ink_assgn_trgt})(); waitRemaining = (() => {  return __ink_match((time() > goalLoadTime), [[() => (true), () => (0)], [() => (__Ink_Empty), () => ((goalLoadTime - time()))]]) })(); return wait(waitRemaining, () => (() => { let initial;  initial = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initial] || null : (__ink_acc_trgt.initial !== undefined ? __ink_acc_trgt.initial : null)})(); addMessage(initial(), (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); render(); return requestAnimationFrame(() => (() => { let inputField;  inputField = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.eliza-input`)); return __ink_match(inputField, [[() => (null), () => (null)], [() => (__Ink_Empty), () => (bind(inputField, __Ink_String(`focus`))())]]) })()) })()) })()); renderEliza = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})(), [[() => (null), () => (h(__Ink_String(`div`), [__Ink_String(`eliza-loading`)], [str(__Ink_String(`Loading Eliza...`))]))], [() => (__Ink_Empty), () => (h(__Ink_String(`div`), [__Ink_String(`eliza-ui`)], [h(__Ink_String(`ul`), [__Ink_String(`eliza-message-list`)], Messages(state)), hae(__Ink_String(`input`), [__Ink_String(`eliza-input`)], {value: (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[input] || null : (__ink_acc_trgt.input !== undefined ? __ink_acc_trgt.input : null)})(), placeholder: __Ink_String(`Say something...`)}, {input: evt => (() => {  (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(input, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.input) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); return render() })(), keydown: evt => (() => { let request;  return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => (__ink_match(request = trim((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[input] || null : (__ink_acc_trgt.input !== undefined ? __ink_acc_trgt.input : null)})(), __Ink_String(` `)), [[() => (__Ink_String(``)), () => (null)], [() => (__Ink_Empty), () => ((() => { let request;  request = trim((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[input] || null : (__ink_acc_trgt.input !== undefined ? __ink_acc_trgt.input : null)})(), __Ink_String(` `)); addMessage(request, (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[User] || null : (__ink_acc_trgt.User !== undefined ? __ink_acc_trgt.User : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(input, __Ink_String(``)) : (__ink_assgn_trgt.input) = __Ink_String(``); return __ink_assgn_trgt})(); render(); scrollToMessageListEnd(); return wait(1.20000000, () => (() => { let response;  response = (() => {  return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[respond] || null : (__ink_acc_trgt.respond !== undefined ? __ink_acc_trgt.respond : null)})() })()(request); addMessage(response, (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); render(); return scrollToMessageListEnd() })()) })())]]))]]) })()}, [])]))]]); render = () => update(h(__Ink_String(`div`), [__Ink_String(`app`)], [h(__Ink_String(`header`), [], [h(__Ink_String(`h1`), [], [__Ink_String(`Eliza`)]), h(__Ink_String(`div`), [__Ink_String(`header-waveform`)], []), h(__Ink_String(`nav`), [], [hae(__Ink_String(`a`), [], {href: __Ink_String(`#`)}, {click: () => (() => {  (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(showAbout__ink_qm__, true) : (__ink_assgn_trgt.showAbout__ink_qm__) = true; return __ink_assgn_trgt})(); return render() })()}, [__Ink_String(`about`)])])]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[showAbout__ink_qm__] || null : (__ink_acc_trgt.showAbout__ink_qm__ !== undefined ? __ink_acc_trgt.showAbout__ink_qm__ : null)})(), [[() => (true), () => (h(__Ink_String(`div`), [__Ink_String(`about-page`)], [hae(__Ink_String(`a`), [__Ink_String(`about-back`)], {href: __Ink_String(`#`)}, {click: () => (() => {  (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(showAbout__ink_qm__, false) : (__ink_assgn_trgt.showAbout__ink_qm__) = false; return __ink_assgn_trgt})(); return render() })()}, [__Ink_String(`← back`)]), h(__Ink_String(`div`), [__Ink_String(`about-title`)], [str(__Ink_String(`About Eliza.`))]), h(__Ink_String(`p`), [], [str(__Ink_String(`This app is a modern incarnation of the `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://en.wikipedia.org/wiki/ELIZA`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`ELIZA`))]), str(__Ink_String(` program first developed in the mid-1960's at
						MIT's AI lab. ELIZA was one of the earliest programs
						designed to hold a natural language conversation with
						human users, and uses a simple algorithm with a
						predefined "script" to parse your messages and try to
						offer a related response. The most popular script,
						including the one included in this web app, is a
						"doctor" script that tries to ask rhetorical questions
						like a superficial therapist might.`))]), h(__Ink_String(`p`), [], [str(__Ink_String(`In general, ELIZA scripts specify a set of
						patterns that the program should try to find in the
						user's question, like "I am X" or "I want to Y", and
						offer a range of choices for the program to build a
						response that incorporates some elements of the user's
						question back in the generated response.`))]), h(__Ink_String(`p`), [], [str(__Ink_String(`The Eliza that you see here is open-source and
						written in the `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://dotink.co/`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`Ink programming language`))]), str(__Ink_String(` and compiled down to JavaScript to run in your
						browser by the `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://dotink.co/posts/september/`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`September compiler`))]), str(__Ink_String(`. You can read the full source code and
						documentation on GitHub at `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://github.com/thesephist/eliza`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`thesephist/eliza`))]), str(__Ink_String(`.`))]), h(__Ink_String(`p`), [], [str(__Ink_String(`Eliza is a project by `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://thesephist.com/`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`Linus`))]), str(__Ink_String(`. You can find me on Twitter at `)), ha(__Ink_String(`a`), [], {href: __Ink_String(`https://twitter.com/thesephist`), target: __Ink_String(`_blank`)}, [str(__Ink_String(`@thesephist`))]), str(__Ink_String(`.`))])]))], [() => (__Ink_Empty), () => (renderEliza())]])])); return self = {render: render} })();
randomColor = choose(AccentColors);
bind((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[style] || null : (__ink_acc_trgt.style !== undefined ? __ink_acc_trgt.style : null)})(), __Ink_String(`setProperty`))(__Ink_String(`--accent`), randomColor);
State = {Eliza: null, input: __Ink_String(``), messages: [], addMessage: (msg, speaker) => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})()), {message: msg, speaker: speaker}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})())]) = {message: msg, speaker: speaker}; return __ink_assgn_trgt})(), showAbout__ink_qm__: false};
app = App(State);
(() => {  return (() => {let __ink_acc_trgt = __as_ink_string(app); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})() })()()

