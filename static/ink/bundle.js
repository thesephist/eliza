
str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => {return __Ink_String(`class`)})(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => {return __Ink_String(`class`)})()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => __Ink_String(`string`), () => str(child)], [() => __Ink_Empty, () => child]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => {let render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); let InitialDom = h(__Ink_String(`div`), [__Ink_String(`matterhorn`)], []); let node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); let self = {node: node, prev: InitialDom, update: jdom => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()})()}; return self})()
f = format;
Speaker = {Eliza: 0, User: 1};
Messages = state => (() => {let messages = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})(); return map(messages, msg => h(__Ink_String(`div`), [__Ink_String(`eliza-message`), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(msg); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[speaker] || null : (__ink_acc_trgt.speaker !== undefined ? __ink_acc_trgt.speaker : null)})(), [[() => (() => {return (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()})(), () => __Ink_String(`from-eliza`)], [() => __Ink_Empty, () => __Ink_String(`from-user`)]])], [str((() => {let __ink_acc_trgt = __as_ink_string(msg); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[message] || null : (__ink_acc_trgt.message !== undefined ? __ink_acc_trgt.message : null)})())]))})();
App = state => (() => {let r = Renderer((() => {let __ink_acc_trgt = __as_ink_string(document); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); let update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})(); let addMessage = (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[addMessage] || null : (__ink_acc_trgt.addMessage !== undefined ? __ink_acc_trgt.addMessage : null)})(); let req = fetch(__Ink_String(`/data/script.txt`)); let reqDecoded = bind(req, __Ink_String(`then`))(resp => bind(resp, __Ink_String(`text`))()); bind(reqDecoded, __Ink_String(`then`))(scriptFile => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(Eliza, __ink_ident_new(scriptFile)) : (__ink_assgn_trgt.Eliza) = __ink_ident_new(scriptFile); return __ink_assgn_trgt})(); let initial = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[initial] || null : (__ink_acc_trgt.initial !== undefined ? __ink_acc_trgt.initial : null)})(); addMessage(initial(), (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); render(); return requestAnimationFrame(() => (() => {let inputField = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.eliza-input`)); return bind(inputField, __Ink_String(`focus`))()})())})()); let render = () => update(h(__Ink_String(`div`), [__Ink_String(`app`)], [h(__Ink_String(`header`), [], [h(__Ink_String(`h1`), [], [__Ink_String(`Eliza`)]), h(__Ink_String(`nav`), [], [ha(__Ink_String(`a`), [], {href: __Ink_String(`https://github.com/thesephist/eliza`), target: __Ink_String(`_blank`)}, [__Ink_String(`about`)])])]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})(), [[() => null, () => h(__Ink_String(`div`), [], [str(__Ink_String(`Loading Eliza...`))])], [() => __Ink_Empty, () => h(__Ink_String(`div`), [__Ink_String(`eliza-ui`)], [h(__Ink_String(`ul`), [__Ink_String(`eliza-message-list`)], Messages(state)), hae(__Ink_String(`input`), [__Ink_String(`eliza-input`)], {value: (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[input] || null : (__ink_acc_trgt.input !== undefined ? __ink_acc_trgt.input : null)})(), placeholder: __Ink_String(`Say something...`)}, {input: evt => (() => {(() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(input, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.input) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); return render()})(), keydown: evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => __Ink_String(`Enter`), () => (() => {request = trim((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[input] || null : (__ink_acc_trgt.input !== undefined ? __ink_acc_trgt.input : null)})(), __Ink_String(` `)); addMessage(request, (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[User] || null : (__ink_acc_trgt.User !== undefined ? __ink_acc_trgt.User : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(input, __Ink_String(``)) : (__ink_assgn_trgt.input) = __Ink_String(``); return __ink_assgn_trgt})(); render(); return wait(1, () => (() => {response = (() => {return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[respond] || null : (__ink_acc_trgt.respond !== undefined ? __ink_acc_trgt.respond : null)})()})()(request); addMessage(response, (() => {let __ink_acc_trgt = __as_ink_string(Speaker); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Eliza] || null : (__ink_acc_trgt.Eliza !== undefined ? __ink_acc_trgt.Eliza : null)})()); return render()})())})()]])}, [])])]])])); let self = {render: render}; return self})();
State = {Eliza: null, input: __Ink_String(``), messages: [], addMessage: (msg, speaker) => (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})()), {message: msg, speaker: speaker}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[messages] || null : (__ink_acc_trgt.messages !== undefined ? __ink_acc_trgt.messages : null)})())]) = {message: msg, speaker: speaker}; return __ink_assgn_trgt})()};
app = App(State);
(() => {return (() => {let __ink_acc_trgt = __as_ink_string(app); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})()})()()
